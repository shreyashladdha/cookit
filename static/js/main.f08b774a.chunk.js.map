{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","recipe_title","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","numberOfResults","setNumberOfResults","useEffect","getRecipes","a","fetch","response","json","data","console","log","hits","onSubmit","e","preventDefault","type","value","onChange","target","key","label","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,MAAQ,sBAAsB,WAAa,6B,oNCkB1HC,EAjBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACtC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,cAAeP,GACpC,4BACKG,EAAYK,KAAI,SAAAC,GAAU,OACxB,4BAAKA,EAAWC,UAGvB,6BACA,2BAAIT,GAEJ,yBAAKG,UAAWC,IAAMH,MAAOS,IAAKT,EAAOU,IAAI,OCkE1CC,MA5Ef,WACE,IADa,EAGiBC,mBAAS,IAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,OAKaJ,mBAAS,IALtB,mBAKNK,EALM,KAKCC,EALD,OAMiCN,mBAAS,GAN1C,mBAMNO,EANM,KAMWC,EANX,KASbC,qBAAU,WACRC,MACC,CAACH,EAAgBF,IAEpB,IAAMK,EAAU,uCAAG,8BAAAC,EAAA,sEAEMC,MAAM,mCAAD,OAAoCP,EAApC,mBAdf,WAce,oBAbd,mCAac,sBAA2FE,EAA3F,wCAFX,cAEXM,EAFW,gBAGEA,EAASC,OAHX,OAGXC,EAHW,OAIjBC,QAAQC,IAAIF,GACZb,EAAWa,EAAKG,MALC,2CAAH,qDAwBhB,OAEE,yBAAK5B,UAAU,OAEb,yBAAKA,UAAU,iBACb,uCAGA,8CAIF,0BAAM6B,SApBQ,SAAAC,GAChBA,EAAEC,iBACFf,EAASH,GACTK,EAAmB,GAEnBJ,EAAU,KAemBd,UAAU,eACnC,2BAAOA,UAAU,aAAagC,KAAK,OAAOC,MAAOpB,EAAQqB,SA9B1C,SAAAJ,GACnBhB,EAAUgB,EAAEK,OAAOF,UA8Bf,4BAAQjC,UAAU,gBAAgBgC,KAAK,UAAvC,WAMF,yBAAKhC,UAAU,WACdW,EAAQP,KAAI,SAAAF,GAAM,OACjB,kBAAC,EAAD,CACEkC,IAAKlC,EAAOA,OAAOmC,MACnBzC,MAAOM,EAAOA,OAAOmC,MACrBxC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,kBAG/B,6BAEA,4BAAQC,UAAU,kBAAkBsC,QA7CV,WAC5BpB,EAAmBD,EAAkB,GACrCS,QAAQC,IAAIV,KA2CV,eC7DcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.f08b774a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"recipe_title\":\"recipe_recipe_title__Ul_Sm\",\"image\":\"recipe_image__BtdIE\",\"recipe_box\":\"recipe_recipe_box__1uLap\"};","import React from 'react';\nimport style from './recipe.module.css'\nconst Recipe = ({ title, calories, image, ingredients }) => {\n    return (\n        <div className={style.recipe} >\n            <h1 className={style.recipe_title}>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient =>(\n                   <li>{ingredient.text}</li> \n                ))}\n            </ol>\n            <br></br>\n            <p>{calories}</p>\n           \n            <img className={style.image} src={image} alt=\"\"  />\n\n        </div>\n    )\n}\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nfunction App() {\n  const APP_ID = \"0e6236ed\";\n  const APP_KEY = \"9393760810b74b8943d5b57bd020db43\"\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState(\"\");\n  const [numberOfResults, setNumberOfResults] = useState(5);\n\n\n  useEffect(() => {\n    getRecipes();\n  }, [numberOfResults+query]);\n\n  const getRecipes = async () => {\n    \n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=${numberOfResults}&calories=591-722&health=vegetarian`);\n    const data = await response.json();\n    console.log(data);\n    setRecipes(data.hits);\n  };\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const updateNumberofResults = () => {\n    setNumberOfResults(numberOfResults + 5);\n    console.log(numberOfResults);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search)\n    setNumberOfResults(5);\n\n    setSearch('')\n  }\n\n  return (\n    \n    <div className=\"App\">\n      \n      <div className=\"navigator_bar\">\n        <h1>\n          Recipit\n        </h1>\n        <h3>\n          Yass you can!\n        </h3>\n      </div>\n      <form onSubmit={getSearch} className=\"Search_form\">\n        <input className=\"search_bar\" type=\"text\" value={search} onChange={updateSearch} />\n        <button className=\"search_button\" type=\"submit\">\n          search\n       </button>\n\n\n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe\n          key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients} />\n      ))}\n      </div>\n      <br>\n      </br>\n      <button className=\"get_more_button\" onClick={updateNumberofResults}>\n        Get More!\n      </button>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}